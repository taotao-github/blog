(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{495:function(a,t,s){"use strict";s.r(t);var r=s(46),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_1-三种基础数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-三种基础数据结构"}},[a._v("#")]),a._v(" 1. 三种基础数据结构")]),a._v(" "),s("blockquote",[s("p",[a._v("在JavaScript中，有三种常用的数据，分别为栈（stack）、堆（heap）、队列（queue），它们是理解整个核心的基础，在JavaScript中分别有不同的应用场景。")])]),a._v(" "),s("h2",{attrs:{id:"_1-1栈（stack）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1栈（stack）"}},[a._v("#")]),a._v(" 1.1栈（stack）")]),a._v(" "),s("h3",{attrs:{id:"_1-1-1-栈的含义。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-栈的含义。"}},[a._v("#")]),a._v(" 1.1.1 栈的含义。")]),a._v(" "),s("blockquote",[s("p",[a._v("栈根据不同的应用场景，有着不同的含义。")])]),a._v(" "),s("ul",[s("li",[a._v("场景1：栈是一种数据结构，它表达的是数据的一种存取方式。")]),a._v(" "),s("li",[a._v("场景2：栈可以用来规定代码的执行顺序，在JavaScript中叫作函数调用栈（call stack），它是根据栈数据结构理论而实现的一种实践。理解函数调用栈的概念非常重要。")]),a._v(" "),s("li",[a._v("场景3：栈表达的是一种数据在内存中的存储区域，通常叫做栈区。JavaScript没有同其他语言区分栈区或堆区，简单粗暴的认为在JavaScript中，所有数据都是存放在堆内存中。")])]),a._v(" "),s("h3",{attrs:{id:"_1-1-2-栈数据结构的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-栈数据结构的特点"}},[a._v("#")]),a._v(" 1.1.2 栈数据结构的特点")]),a._v(" "),s("img",{attrs:{src:a.$withBase("/images/javascript核心技术开发/栈数据结构.jpg"),alt:"栈数据结构"}}),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("总结")]),a._v(" "),s("p",[a._v("栈数据结构与兵乓球的存取方式如出一辙，这种存取特点可总结为“先进后出”，“后进先出”。如图所示，处于栈顶的数据true，最后进栈，最先出栈。处于栈底的数据1，最先进栈，最后出栈。")])]),a._v(" "),s("p",[a._v("在JavaScript中，数组（Array）提供了两个栈方法来应对栈的这种存取方式")]),a._v(" "),s("ol",[s("li",[a._v("push(): 向数组末尾追加任意类型的数据（进栈方法），并返回数组修改后的长度。")]),a._v(" "),s("li",[a._v("pop()：弹出数组末尾最后一个元素（出栈方法）。 返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。")])]),a._v(" "),s("h2",{attrs:{id:"_1-2-堆（heap）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-堆（heap）"}},[a._v("#")]),a._v(" 1.2.堆（heap）")]),a._v(" "),s("h3",{attrs:{id:"_1-2-1-堆数据结构的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-堆数据结构的特点"}},[a._v("#")]),a._v(" 1.2.1 堆数据结构的特点")]),a._v(" "),s("blockquote",[s("p",[a._v("堆数据结构通常是一种树状结构。它的存取方式与在书架上取书的方式相似。书整齐的排放在书架上，只要知道书的名字，便可以从书架上找到并取出它来，我们甚至不用担心书的存放顺序，也不用像取兵乓球一样，并先把上面的拿出才能取出自己想要的。")])]),a._v(" "),s("img",{attrs:{src:a.$withBase("/images/javascript核心技术开发/堆数据结构.jpg"),alt:"堆数据结构"}}),a._v(" "),s("p",[a._v("该示意图可以用字面量对象的形式体现出来")]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" testHeap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  b"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  c"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    m"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("blockquote",[s("p",[a._v("当我们想访问a时，只需要通过testHeap.a来访问，而不用担心a、b、c的具体顺序。")])]),a._v(" "),s("h2",{attrs:{id:"_1-3-队列（queue）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-队列（queue）"}},[a._v("#")]),a._v(" 1.3. 队列（queue）")]),a._v(" "),s("blockquote",[s("p",[a._v("在JavaScript中，理解队列数据结构时的目的是为了搞清楚事件循环（Event Loop）机制到底是怎么回事。")])]),a._v(" "),s("h3",{attrs:{id:"_1-3-1-队列数据结构的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-队列数据结构的特点"}},[a._v("#")]),a._v(" 1.3.1 队列数据结构的特点")]),a._v(" "),s("blockquote",[s("p",[a._v("队列是一种先进先出的数据结构，就如排队过安检，队伍前面的一定最先过安检。\n"),s("img",{attrs:{src:a.$withBase("/images/javascript核心技术开发/队列数据结构.jpg"),alt:"队列数据结构"}})])])])}),[],!1,null,null,null);t.default=e.exports}}]);